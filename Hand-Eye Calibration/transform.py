import argparse
import numpy as np
import math

from tf_finder import find_tf


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', action='store_true')
    args = parser.parse_args()


    data_ref1 = np.array([
                          [-0.11043, -0.13027, 1.2113],
                          #[-0.57808, -0.19027, 1.2768],                     
                          #[-0.34041, -0.33332, 1.3848],
                          #[-0.059157, -0.4368, 1.368],
                          #[0.12999, -0.44586, 1.4158],
                          [-0.073021, -0.1822, 0.935],
                          #[0.11753, -0.17088, 0.897],
                          #[0.25183, -0.10475, 0.86825],
                          #[0.29052, -0.064346, 0.77025],
                          [0.29628, -0.01347, 1.171],
                          [0.44077, -0.047333, 1.0698],
                          [-0.404, 0.20571, 1.153],
                          [0.058758, 0.17228, 1.1653],
                          [0.10003, -0.012177, 1.3065],
                          [0.2857, 0.050823, 1.18]])

    data_ref2 = np.array([
                          [0.797946252806,0.126883112543,-0.314462286535],
                          #[0.877194123733,0.56773452309,-0.351220434301],                     
                          #[0.962014926618,0.301418673938,-0.280155394727],
                          #[1.01691450211,0.0569914533036,-0.219937468602],
                          #[0.955585791821,-0.0924273297195,-0.152010492599],
                          [0.776740185074,0.0883678640556,-0.0557993762245],
                          #[0.745462576369,-0.0997829711339,-0.0294795417484],
                          #[0.669548785894,-0.227770291077,-0.0241397137537],
                          #[0.607739677498,-0.270556828733,0.0449355398131],
                          [0.673592230636,-0.261031135664,-0.286428455517],
                          [0.665369128932,-0.394968869786,-0.199516886708],
                          [0.489595351447,0.43724367251,-0.372693415408],
                          [0.491465369937,-0.0294380260139,-0.364577504673],
                          [0.70265185379,-0.0676394172514,-0.42672955205],
                          [0.611620950922,-0.246155803545,-0.326052899873]])

    
    if args.n:	
        left_tf = find_tf(data_ref1, data_ref2)
    else:
        left_tf = np.array(
			[[-0.0712957,  -0.87246188,  0.48345339,  0.08128069],
			 [-0.99223295,  0.01250249, -0.12376373,  0.11976641],
			 [ 0.10193477, -0.48852221, -0.8665768,   0.76787652],
			 [ 0.0,          0.0,          0.0,          1.0 ]])

    

    """
    for i in range (np.shape(data_ref1)[0]):
        print(i)
        x = np.reshape(np.array(np.append(data_ref1[i], 1)),[4, 1])
        y = np.reshape(np.array(np.append(data_ref2[i], 1)),[4, 1])
	x = np.matmul(left,x)
        print((x-y))
        print("////////////////////////")
    """
    x = np.zeros([3, 1])
    x = [0.24991106986999512, 0.16233177483081818, 1.2450000047683716]

    y = np.matmul(left_tf,np.append(x, 1))
    print(y[:3])


if __name__ == "__main__":
    main()
